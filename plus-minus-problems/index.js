class MathGame {
    constructor() {
        this.currentExample = 0;
        this.totalExamples = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        this.maxNumber = 10;
        this.isGameActive = false;
        this.gameStartTime = null;
        this.gameTimer = null;
        
        this.initializeElements();
        this.bindEvents();
    }
    
    initializeElements() {
        this.settingsDiv = document.getElementById('settings');
        this.gameScreen = document.getElementById('gameScreen');
        this.resultsDiv = document.getElementById('results');
        
        this.playerNameInput = document.getElementById('playerNameInput');
        this.playerNameSpan = document.getElementById('playerName');
        this.maxNumberInput = document.getElementById('maxNumber');
        this.examplesCountInput = document.getElementById('examplesCount');
        this.startGameBtn = document.getElementById('startGame');
        
        this.currentExampleSpan = document.getElementById('currentExample');
        this.totalExamplesSpan = document.getElementById('totalExamples');
        this.currentScoreSpan = document.getElementById('currentScore');
        this.gameTimerSpan = document.getElementById('gameTimer');
        this.exampleTextSpan = document.getElementById('exampleText');
        this.answerInput = document.getElementById('answerInput');
        this.nextExampleBtn = document.getElementById('nextExample');
        this.restartRoundBtn = document.getElementById('restartRound');
        this.newGameBtn = document.getElementById('newGame');
        
        this.finalScoreSpan = document.getElementById('finalScore');
        this.totalExamplesResultSpan = document.getElementById('totalExamplesResult');
        this.finalTimeSpan = document.getElementById('finalTime');
        this.wrongExamplesTitle = document.getElementById('wrongExamplesTitle');
        this.wrongExamplesList = document.getElementById('wrongExamplesList');
        this.playAgainBtn = document.getElementById('playAgain');
    }
    
    bindEvents() {
        this.startGameBtn.addEventListener('click', () => this.startGame());
        this.nextExampleBtn.addEventListener('click', () => this.nextExample());
        this.restartRoundBtn.addEventListener('click', () => this.restartRound());
        this.newGameBtn.addEventListener('click', () => this.newGame());
        this.playAgainBtn.addEventListener('click', () => this.playAgain());
        
        this.answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.nextExample();
            }
        });
        
        this.playerNameInput.addEventListener('input', () => {
            this.updatePlayerName();
            this.savePlayerName();
        });
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.maxNumberInput.addEventListener('change', () => this.saveGameSettings());
        this.examplesCountInput.addEventListener('change', () => this.saveGameSettings());
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        document.querySelectorAll('input[name="operationType"]').forEach(radio => {
            radio.addEventListener('change', () => this.saveGameSettings());
        });
    }
    
    startGame() {
        console.log('üéÆ [startGame] –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        this.stopTimer();
        this.isGameActive = false;
        
        this.maxNumber = parseInt(this.maxNumberInput.value);
        this.totalExamples = parseInt(this.examplesCountInput.value);
        
        console.log(`üéÆ [startGame] –ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxNumber=${this.maxNumber}, totalExamples=${this.totalExamples}`);
        
        if (this.maxNumber < 1 || this.totalExamples < 1) {
            console.log('‚ùå [startGame] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–æ–ª—å—à–µ 0)');
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        
        this.currentExample = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        this.isGameActive = true;
        
        console.log('üéÆ [startGame] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤');
        this.generateExamples();
        console.log('üéÆ [startGame] –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω');
        this.showGameScreen();
        console.log('üéÆ [startGame] –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä');
        this.startTimer();
        console.log('üéÆ [startGame] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä');
        this.showCurrentExample();
        console.log('üéÆ [startGame] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    generateExamples() {
        console.log('üîÑ [generateExamples] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
        this.examples = [];
        let hasZeroResult = false;
        
        for (let i = 0; i < this.totalExamples; i++) {
            console.log(`üîÑ [generateExamples] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä ${i + 1}/${this.totalExamples}`);
            const example = this.generateRandomExample(hasZeroResult);
            console.log(`üîÑ [generateExamples] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä: ${example.text} = ${example.correctAnswer}`);
            this.examples.push(example);
            
            // –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0
            if (example.correctAnswer === 0) {
                hasZeroResult = true;
                console.log('üîÑ [generateExamples] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0, –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
            }
        }
        console.log(`üîÑ [generateExamples] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ ${this.examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
    }
    
    generateRandomExample(hasZeroResult = false) {
        console.log('üé≤ [generateRandomExample] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞');
        const operationType = document.querySelector('input[name="operationType"]:checked').value;
        let operation;
        
        console.log(`üé≤ [generateRandomExample] –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operationType}, hasZeroResult: ${hasZeroResult}`);
        
        switch(operationType) {
            case 'addition':
                operation = 'addition';
                break;
            case 'subtraction':
                operation = 'subtraction';
                break;
            case 'both':
                operation = Math.random() < 0.5 ? 'addition' : 'subtraction';
                break;
            default:
                operation = 'addition';
        }
        
        console.log(`üé≤ [generateRandomExample] –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation}`);
        
        if (operation === 'addition') {
            // –î–ª—è —Å–ª–æ–∂–µ–Ω–∏—è: –æ–±–∞ —Å–ª–∞–≥–∞–µ–º—ã—Ö –∏ —Å—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å maxNumber
            const a = Math.floor(Math.random() * this.maxNumber) + 1;
            const maxB = this.maxNumber - a;
            const b = Math.floor(Math.random() * maxB) + 1;
            const result = a + b;
            return {
                type: 'addition',
                a: a,
                b: b,
                result: result,
                text: `${a} + ${b} = `,
                correctAnswer: result
            };
        } else {
            console.log('üé≤ [generateRandomExample] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–µ');
            // –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è: —É–º–µ–Ω—å—à–∞–µ–º–æ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å maxNumber
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–∞–µ–º–æ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö maxNumber
            let a = Math.floor(Math.random() * this.maxNumber) + 1;
            console.log(`üé≤ [generateRandomExample] –£–º–µ–Ω—å—à–∞–µ–º–æ–µ a = ${a}`);
            // –í—ã—á–∏—Ç–∞–µ–º–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —É–º–µ–Ω—å—à–∞–µ–º–æ–≥–æ
            let b = Math.floor(Math.random() * a) + 1;
            let result = a - b;
            console.log(`üé≤ [generateRandomExample] –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: a=${a}, b=${b}, result=${result}`);
            
            // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0 —É–∂–µ –±—ã–ª –≤ —Ä–∞—É–Ω–¥–µ, –∏–∑–±–µ–≥–∞–µ–º –µ–≥–æ
            if (hasZeroResult && result === 0) {
                console.log('üé≤ [generateRandomExample] –†–µ–∑—É–ª—å—Ç–∞—Ç 0, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–±–µ–∂–∞—Ç—å');
                // –ï—Å–ª–∏ a = 1, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 0, –ø–æ—ç—Ç–æ–º—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ a
                if (a === 1) {
                    console.log('üé≤ [generateRandomExample] a=1, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ a');
                    a = Math.floor(Math.random() * this.maxNumber) + 2; // –ú–∏–Ω–∏–º—É–º 2
                    console.log(`üé≤ [generateRandomExample] –ù–æ–≤–æ–µ a = ${a}`);
                }
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç > 0
                let attempts = 0;
                do {
                    attempts++;
                    console.log(`üé≤ [generateRandomExample] –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–±–µ–∂–∞—Ç—å 0, –∏—Ç–µ—Ä–∞—Ü–∏—è ${attempts}`);
                    b = Math.floor(Math.random() * a) + 1;
                    result = a - b;
                    console.log(`üé≤ [generateRandomExample] –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: a=${a}, b=${b}, result=${result}`);
                    
                    if (attempts > 100) {
                        console.error('üö® [generateRandomExample] –ü–†–ï–í–´–®–ï–ù–û –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ü–´–¢–û–ö! –í–æ–∑–º–æ–∂–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!');
                        break;
                    }
                } while (result === 0);
                console.log(`üé≤ [generateRandomExample] –¶–∏–∫–ª –∏–∑–±–µ–∂–∞–Ω–∏—è 0 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
            }
            
            return {
                type: 'subtraction',
                a: a,
                b: b,
                result: result,
                text: `${a} - ${b} = `,
                correctAnswer: result
            };
        }
    }
    
    showGameScreen() {
        this.settingsDiv.classList.add('hidden');
        this.resultsDiv.classList.add('hidden');
        this.gameScreen.classList.remove('hidden');
        
        this.totalExamplesSpan.textContent = this.totalExamples;
        this.currentScoreSpan.textContent = this.score;
    }
    
    showCurrentExample() {
        console.log(`üìù [showCurrentExample] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä ${this.currentExample + 1}/${this.totalExamples}`);
        
        if (this.currentExample >= this.totalExamples) {
            console.log('üìù [showCurrentExample] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É');
            this.endGame();
            return;
        }
        
        const example = this.examples[this.currentExample];
        console.log(`üìù [showCurrentExample] –ü—Ä–∏–º–µ—Ä: ${example.text} (–æ—Ç–≤–µ—Ç: ${example.correctAnswer})`);
        this.exampleTextSpan.textContent = example.text;
        this.currentExampleSpan.textContent = this.currentExample + 1;
        
        this.answerInput.value = '';
        this.answerInput.focus();
        console.log('üìù [showCurrentExample] –ü—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑–∞–Ω, —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
    }
    
    nextExample() {
        console.log('‚û°Ô∏è [nextExample] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        if (!this.isGameActive) {
            console.log('‚û°Ô∏è [nextExample] –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤—ã—Ö–æ–¥–∏–º');
            return;
        }
        
        const userAnswer = parseInt(this.answerInput.value);
        const currentExample = this.examples[this.currentExample];
        
        console.log(`‚û°Ô∏è [nextExample] –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userAnswer}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentExample.correctAnswer}`);
        
        if (isNaN(userAnswer)) {
            console.log('‚û°Ô∏è [nextExample] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥');
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
            return;
        }
        
        if (userAnswer === currentExample.correctAnswer) {
            this.score++;
            console.log(`‚û°Ô∏è [nextExample] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –°—á–µ—Ç: ${this.score}`);
        } else {
            this.wrongExamples.push({
                example: currentExample,
                userAnswer: userAnswer
            });
            console.log(`‚û°Ô∏è [nextExample] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${this.wrongExamples.length}`);
        }
        
        this.currentExample++;
        this.currentScoreSpan.textContent = this.score;
        console.log(`‚û°Ô∏è [nextExample] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–º–µ—Ä—É ${this.currentExample + 1}/${this.totalExamples}`);
        
        if (this.currentExample >= this.totalExamples) {
            console.log('‚û°Ô∏è [nextExample] –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É');
            this.endGame();
        } else {
            console.log('‚û°Ô∏è [nextExample] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä');
            this.showCurrentExample();
        }
    }
    
    endGame() {
        this.isGameActive = false;
        this.stopTimer();
        this.showResults();
    }
    
    showResults() {
        this.gameScreen.classList.add('hidden');
        this.resultsDiv.classList.remove('hidden');
        
        this.finalScoreSpan.textContent = this.score;
        this.totalExamplesResultSpan.textContent = this.totalExamples;
        this.finalTimeSpan.textContent = this.getGameTime();
        
        this.displayWrongExamples();
    }
    
    displayWrongExamples() {
        this.wrongExamplesList.innerHTML = '';
        
        if (this.wrongExamples.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            this.wrongExamplesTitle.textContent = '–û—Ç–ª–∏—á–Ω–æ!';
            
            const li = document.createElement('li');
            li.textContent = '–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ';
            li.style.background = '#e8f5e8';
            li.style.borderColor = '#4CAF50';
            li.style.color = '#2e7d32';
            this.wrongExamplesList.appendChild(li);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
            this.wrongExamplesTitle.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:';
            
            this.wrongExamples.forEach(wrongExample => {
                const li = document.createElement('li');
                li.textContent = `${wrongExample.example.text} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${wrongExample.example.correctAnswer}, –í–∞—à –æ—Ç–≤–µ—Ç: ${wrongExample.userAnswer}`;
                this.wrongExamplesList.appendChild(li);
            });
        }
    }
    
    restartRound() {
        if (!this.isGameActive) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        this.currentExample = 0;
        this.score = 0;
        this.wrongExamples = [];
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.stopTimer();
        this.startTimer();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        this.generateExamples();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.currentScoreSpan.textContent = this.score;
        this.showCurrentExample();
    }
    
    updatePlayerName() {
        const name = this.playerNameInput.value.trim();
        if (name) {
            this.playerNameSpan.textContent = name;
        } else {
            this.playerNameSpan.textContent = '–ò–≥—Ä–æ–∫';
        }
    }
    
    savePlayerName() {
        const name = this.playerNameInput.value.trim();
        if (name) {
            localStorage.setItem('mathGamePlayerName', name);
            this.playerNameSpan.textContent = name;
        }
    }
    
    loadPlayerName() {
        const savedName = localStorage.getItem('mathGamePlayerName');
        if (savedName) {
            this.playerNameInput.value = savedName;
            this.playerNameSpan.textContent = savedName;
        }
    }
    
    saveGameSettings() {
        const operationType = document.querySelector('input[name="operationType"]:checked').value;
        const maxNumber = this.maxNumberInput.value;
        const examplesCount = this.examplesCountInput.value;
        
        localStorage.setItem('mathGameOperationType', operationType);
        localStorage.setItem('mathGameMaxNumber', maxNumber);
        localStorage.setItem('mathGameExamplesCount', examplesCount);
    }
    
    loadGameSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π
        const savedOperationType = localStorage.getItem('mathGameOperationType');
        if (savedOperationType) {
            const radioButton = document.querySelector(`input[name="operationType"][value="${savedOperationType}"]`);
            if (radioButton) {
                radioButton.checked = true;
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        const savedMaxNumber = localStorage.getItem('mathGameMaxNumber');
        if (savedMaxNumber) {
            this.maxNumberInput.value = savedMaxNumber;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        const savedExamplesCount = localStorage.getItem('mathGameExamplesCount');
        if (savedExamplesCount) {
            this.examplesCountInput.value = savedExamplesCount;
        }
    }
    
    startTimer() {
        console.log('‚è∞ [startTimer] –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞');
        this.gameStartTime = Date.now();
        this.gameTimer = setInterval(() => {
            this.updateTimer();
        }, 1000);
        console.log('‚è∞ [startTimer] –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }
    
    stopTimer() {
        console.log('‚è∞ [stopTimer] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞');
        if (this.gameTimer) {
            clearInterval(this.gameTimer);
            this.gameTimer = null;
            console.log('‚è∞ [stopTimer] –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚è∞ [stopTimer] –¢–∞–π–º–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    
    updateTimer() {
        if (!this.gameStartTime) {
            console.log('‚è∞ [updateTimer] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return;
        }
        
        const elapsed = Date.now() - this.gameStartTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        this.gameTimerSpan.textContent = timeString;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
        if (seconds % 10 === 0) {
            console.log(`‚è∞ [updateTimer] –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeString}`);
        }
    }
    
    getGameTime() {
        if (!this.gameStartTime) return '00:00';
        
        const elapsed = Date.now() - this.gameStartTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    newGame() {
        console.log('üÜï [newGame] –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
        this.isGameActive = false;
        this.stopTimer();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.currentExample = 0;
        this.totalExamples = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        this.gameStartTime = null;
        
        console.log('üÜï [newGame] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        this.settingsDiv.classList.remove('hidden');
        this.gameScreen.classList.add('hidden');
        this.resultsDiv.classList.add('hidden');
        
        this.maxNumberInput.focus();
        console.log('üÜï [newGame] –ù–æ–≤–∞—è –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    }
    
    playAgain() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.currentExample = 0;
        this.totalExamples = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        this.isGameActive = false;
        this.gameStartTime = null;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        this.stopTimer();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        this.settingsDiv.classList.remove('hidden');
        this.gameScreen.classList.add('hidden');
        this.resultsDiv.classList.add('hidden');
        
        this.maxNumberInput.focus();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏
function initializeVersion() {
    if (window.APP_VERSION && window.APP_NAME && window.COPYRIGHT_YEAR) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
        document.getElementById('version-meta').setAttribute('content', window.APP_VERSION);
        document.getElementById('generator-meta').setAttribute('content', `${window.APP_NAME} v${window.APP_VERSION}`);
        document.getElementById('page-title').textContent = `${window.APP_NAME} v${window.APP_VERSION}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
        document.getElementById('footer-text').textContent = `${window.APP_NAME} v${window.APP_VERSION} | ¬© ${window.COPYRIGHT_YEAR}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é
    initializeVersion();
    
    const game = new MathGame();
    game.loadPlayerName();
    game.loadGameSettings();
});
