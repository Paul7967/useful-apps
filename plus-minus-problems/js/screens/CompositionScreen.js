/**
 * –≠–∫—Ä–∞–Ω –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
 */
class CompositionScreen extends BaseScreen {
    constructor(app) {
        super(app, 'composition');
        this.storageService = app.services.storage;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        super.bindEvents();
        
        console.log('üî¢ [CompositionScreen] –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.addEventListener('startComposition', 'click', () => {
            console.log('üî¢ [CompositionScreen] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ startComposition');
            this.startCompositionGame();
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        this.addEventListener('compositionMinNumber', 'change', () => {
            console.log('üî¢ [CompositionScreen] –ò–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ compositionMinNumber:', this.getValue('compositionMinNumber'));
            this.validateRange();
            this.saveCompositionSettings(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        });

        this.addEventListener('compositionMaxNumber', 'change', () => {
            console.log('üî¢ [CompositionScreen] –ò–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ compositionMaxNumber:', this.getValue('compositionMaxNumber'));
            this.validateRange();
            this.saveCompositionSettings(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        this.addEventListener('compositionRepetitions', 'change', () => {
            console.log('üî¢ [CompositionScreen] –ò–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ compositionRepetitions:', this.getValue('compositionRepetitions'));
            this.saveCompositionSettings();
        });

        console.log('üî¢ [CompositionScreen] –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
     */
    onShow() {
        console.log('üî¢ [CompositionScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞');
        
        // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞
        console.log('üî¢ [CompositionScreen] –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞');
        this.loadCompositionSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    loadCompositionSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const savedSettings = this.storageService.loadCompositionSettings();
        console.log('üî¢ [CompositionScreen] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', savedSettings);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        const setValues = (minNumber, maxNumber, repetitions) => {
            console.log('üî¢ [CompositionScreen] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è:', { minNumber, maxNumber, repetitions });
            this.setValue('compositionMinNumber', minNumber);
            this.setValue('compositionMaxNumber', maxNumber);
            this.setValue('compositionRepetitions', repetitions);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
            setTimeout(() => {
                const actualMin = this.getValue('compositionMinNumber');
                const actualMax = this.getValue('compositionMaxNumber');
                const actualRep = this.getValue('compositionRepetitions');
                console.log('üî¢ [CompositionScreen] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π:', {
                    expected: { minNumber, maxNumber, repetitions },
                    actual: { minNumber: actualMin, maxNumber: actualMax, repetitions: actualRep }
                });
            }, 10);
        };
        
        if (savedSettings && savedSettings.minNumber && savedSettings.maxNumber) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            console.log('üî¢ [CompositionScreen] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
            setValues(savedSettings.minNumber, savedSettings.maxNumber, savedSettings.repetitions || 3);
        } else {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('üî¢ [CompositionScreen] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            setValues(1, 20, 3);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        let attempts = 0;
        const maxAttempts = 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        const checkAndCorrect = () => {
            attempts++;
            const currentMin = this.getValue('compositionMinNumber');
            const currentMax = this.getValue('compositionMaxNumber');
            const currentRep = this.getValue('compositionRepetitions');
            
            console.log(`üî¢ [CompositionScreen] –ü—Ä–æ–≤–µ—Ä–∫–∞ ${attempts}:`, {
                minNumber: currentMin,
                maxNumber: currentMax,
                repetitions: currentRep
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (savedSettings && savedSettings.minNumber && savedSettings.maxNumber) {
                const needsCorrection = currentMin != savedSettings.minNumber || 
                                      currentMax != savedSettings.maxNumber || 
                                      currentRep != (savedSettings.repetitions || 3);
                
                if (needsCorrection) {
                    if (attempts < maxAttempts) {
                        console.log(`üî¢ [CompositionScreen] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempts} - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è`);
                        setValues(savedSettings.minNumber, savedSettings.maxNumber, savedSettings.repetitions || 3);
                        setTimeout(checkAndCorrect, 100); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    } else {
                        console.log('üî¢ [CompositionScreen] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ');
                        console.log('üî¢ [CompositionScreen] –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', {
                            minNumber: this.getValue('compositionMinNumber'),
                            maxNumber: this.getValue('compositionMaxNumber'),
                            repetitions: this.getValue('compositionRepetitions')
                        });
                    }
                } else {
                    console.log('üî¢ [CompositionScreen] –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                }
            } else {
                console.log('üî¢ [CompositionScreen] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(checkAndCorrect, 100);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        setTimeout(() => {
            console.log('üî¢ [CompositionScreen] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            this.saveCompositionSettings();
        }, 500);
        
        console.log('üî¢ [CompositionScreen] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    saveCompositionSettings() {
        const minNumber = parseInt(this.getValue('compositionMinNumber'));
        const maxNumber = parseInt(this.getValue('compositionMaxNumber'));
        const repetitions = parseInt(this.getValue('compositionRepetitions'));
        
        console.log('üíæ [CompositionScreen] –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ DOM:', {
            minNumber: this.getValue('compositionMinNumber'),
            maxNumber: this.getValue('compositionMaxNumber'),
            repetitions: this.getValue('compositionRepetitions')
        });
        
        console.log('üíæ [CompositionScreen] –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', {
            minNumber: minNumber,
            maxNumber: maxNumber,
            repetitions: repetitions
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if (isNaN(minNumber) || isNaN(maxNumber) || isNaN(repetitions)) {
            console.error('‚ùå [CompositionScreen] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
            return;
        }
        
        const settings = {
            minNumber: minNumber,
            maxNumber: maxNumber,
            repetitions: repetitions,
            range: `${minNumber}-${maxNumber}`
        };
        
        this.storageService.saveCompositionSettings(settings);
        console.log('üíæ [CompositionScreen] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    startCompositionGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if (!this.validateRange()) {
            return;
        }
        
        const minNumber = parseInt(this.getValue('compositionMinNumber'));
        const maxNumber = parseInt(this.getValue('compositionMaxNumber'));
        const repetitions = parseInt(this.getValue('compositionRepetitions'));
        const selectedRange = `${minNumber}-${maxNumber}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.saveCompositionSettings();
        
        console.log('üî¢ [CompositionScreen] –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º:', selectedRange, '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:', repetitions);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
        this.app.startCompositionGame(selectedRange, repetitions);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getCurrentSettings() {
        const minNumber = parseInt(this.getValue('compositionMinNumber'));
        const maxNumber = parseInt(this.getValue('compositionMaxNumber'));
        const repetitions = parseInt(this.getValue('compositionRepetitions'));
        return {
            minNumber: minNumber,
            maxNumber: maxNumber,
            repetitions: repetitions,
            range: `${minNumber}-${maxNumber}`
        };
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    validateRange() {
        const minNumber = parseInt(this.getValue('compositionMinNumber'));
        const maxNumber = parseInt(this.getValue('compositionMaxNumber'));
        const errorElement = this.getElement('rangeError');
        
        if (isNaN(minNumber) || isNaN(maxNumber)) {
            return false;
        }
        
        if (minNumber >= maxNumber) {
            errorElement.style.display = 'block';
            return false;
        } else {
            errorElement.style.display = 'none';
            return true;
        }
    }
}
