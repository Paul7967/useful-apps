/**
 * –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
 */
class GameScreen extends BaseScreen {
    constructor(app) {
        super(app, 'game');
        this.gameService = app.services.game;
        this.timerService = app.services.timer;
        this.storageService = app.services.storage;
        this.currentExample = null;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        super.bindEvents();
        
        // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        this.addEventListener('nextExample', 'click', () => {
            this.nextExample();
        });

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞
        this.addEventListener('restartRound', 'click', () => {
            this.restartRound();
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        this.addEventListener('newGame', 'click', () => {
            this.newGame();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.addEventListener('answerInput', 'keypress', (e) => {
            if (e.key === 'Enter') {
                this.nextExample();
            }
        });

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        this.timerService.subscribe((timerData) => {
            this.updateTimerDisplay(timerData.formatted);
        });

        console.log('üéÆ [GameScreen] –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
     */
    onShow() {
        console.log('üéÆ [GameScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω');
        this.startGame();
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    startGame() {
        console.log('üéÆ [GameScreen] –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const settings = this.app.getGameSettings();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å
        this.gameService.initGame(settings);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.start();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
        this.showCurrentExample();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateGameInterface();
        
        console.log('üéÆ [GameScreen] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    /**
     * –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
     */
    showCurrentExample() {
        this.currentExample = this.gameService.getCurrentExample();
        
        if (!this.currentExample) {
            console.log('üéÆ [GameScreen] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            this.endGame();
            return;
        }
        
        console.log(`üìù [GameScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä: ${this.currentExample.text}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.setText('exampleText', this.currentExample.text);
        this.setValue('answerInput', '');
        this.setText('currentExample', this.gameService.currentExample + 1);
        this.setText('totalExamples', this.gameService.totalExamples);
        this.setText('currentScore', this.gameService.score);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const answerInput = this.getElement('answerInput');
        if (answerInput) {
            answerInput.focus();
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É
     */
    nextExample() {
        console.log('‚û°Ô∏è [GameScreen] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        const userAnswer = this.getValue('answerInput');
        if (!userAnswer) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        const result = this.gameService.checkAnswer(userAnswer);
        
        if (!result.correct && result.message) {
            alert(result.message);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        this.setText('currentScore', this.gameService.score);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É
        const nextExample = this.gameService.nextExample();
        
        if (this.gameService.isGameFinished()) {
            console.log('üéÆ [GameScreen] –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É');
            this.endGame();
        } else {
            console.log('‚û°Ô∏è [GameScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä');
            this.showCurrentExample();
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    endGame() {
        console.log('üèÅ [GameScreen] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const gameResults = this.gameService.getGameResults();
        const gameTime = this.timerService.getElapsedTime();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const gameResult = {
            playerName: this.app.getPlayerName(),
            score: gameResults.score,
            totalExamples: gameResults.totalExamples,
            time: gameTime,
            operationType: this.app.getGameSettings().operationType,
            maxNumber: this.app.getGameSettings().maxNumber,
            percentage: gameResults.percentage,
            wrongExamples: gameResults.wrongExamples
        };
        
        this.storageService.saveGameResult(gameResult);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.app.showScreen('results', gameResult);
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞
     */
    restartRound() {
        console.log('üîÑ [GameScreen] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å
        this.gameService.restartGame();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ
        this.timerService.start();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
        this.showCurrentExample();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateGameInterface();
        
        console.log('üîÑ [GameScreen] –†–∞—É–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
    }

    /**
     * –ù–æ–≤–∞—è –∏–≥—Ä–∞
     */
    newGame() {
        console.log('üÜï [GameScreen] –ù–æ–≤–∞—è –∏–≥—Ä–∞');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å
        this.gameService.resetGame();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        this.app.showScreen('settings');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateGameInterface() {
        this.setText('totalExamples', this.gameService.totalExamples);
        this.setText('currentScore', this.gameService.score);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
     */
    updateTimerDisplay(timeString) {
        this.setText('gameTimer', timeString);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞
     */
    onHide() {
        console.log('üéÆ [GameScreen] –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.setValue('answerInput', '');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    getGameState() {
        return {
            currentExample: this.gameService.currentExample,
            totalExamples: this.gameService.totalExamples,
            score: this.gameService.score,
            isFinished: this.gameService.isGameFinished(),
            timer: this.timerService.getFormattedTime()
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    setGameState(state) {
        if (state.currentExample !== undefined) {
            this.gameService.currentExample = state.currentExample;
        }
        if (state.score !== undefined) {
            this.gameService.score = state.score;
        }
        
        this.updateGameInterface();
        this.showCurrentExample();
    }
}
