/**
 * –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
class ResultsScreen extends BaseScreen {
    constructor(app) {
        super(app, 'results');
        this.storageService = app.services.storage;
        this.gameResult = null;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        super.bindEvents();
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        this.addEventListener('playAgain', 'click', () => {
            this.playAgain();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
        this.addEventListener('newGameFromResults', 'click', () => {
            this.newGame();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        this.addEventListener('showStats', 'click', () => {
            this.showStatistics();
        });

        console.log('üìä [ResultsScreen] –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
     */
    onShow(gameResult = null) {
        console.log('üìä [ResultsScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        
        if (gameResult) {
            this.gameResult = gameResult;
            this.displayResults(gameResult);
        } else {
            // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
            this.loadLastResult();
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
     */
    displayResults(gameResult) {
        console.log('üìä [ResultsScreen] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', gameResult);
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.setText('finalScore', gameResult.score);
        this.setText('totalExamplesResult', gameResult.totalExamples);
        this.setText('finalTime', this.formatTime(gameResult.time));
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const percentage = Math.round((gameResult.score / gameResult.totalExamples) * 100);
        this.setText('percentage', `${percentage}%`);
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        this.displayWrongExamples(gameResult.wrongExamples || []);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.displaySpecialMessages(gameResult);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
     */
    displayWrongExamples(wrongExamples) {
        const wrongExamplesList = this.getElement('wrongExamplesList');
        if (!wrongExamplesList) return;
        
        wrongExamplesList.innerHTML = '';
        
        if (wrongExamples.length === 0) {
            // –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            this.setText('wrongExamplesTitle', '–û—Ç–ª–∏—á–Ω–æ!');
            
            const li = document.createElement('li');
            li.textContent = '–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ';
            li.style.background = '#e8f5e8';
            li.style.borderColor = '#4CAF50';
            li.style.color = '#2e7d32';
            li.style.padding = '15px';
            li.style.borderRadius = '8px';
            li.style.margin = '10px 0';
            li.style.border = '2px solid';
            wrongExamplesList.appendChild(li);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            this.setText('wrongExamplesTitle', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:');
            
            wrongExamples.forEach(wrongExample => {
                const li = document.createElement('li');
                li.textContent = `${wrongExample.example.text} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${wrongExample.example.correctAnswer}, –í–∞—à –æ—Ç–≤–µ—Ç: ${wrongExample.userAnswer}`;
                li.style.background = '#ffebee';
                li.style.borderColor = '#f44336';
                li.style.color = '#d32f2f';
                li.style.padding = '15px';
                li.style.borderRadius = '8px';
                li.style.margin = '10px 0';
                li.style.border = '2px solid';
                wrongExamplesList.appendChild(li);
            });
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    displaySpecialMessages(gameResult) {
        const percentage = Math.round((gameResult.score / gameResult.totalExamples) * 100);
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        let messageContainer = this.getElement('specialMessage');
        if (!messageContainer) {
            messageContainer = document.createElement('div');
            messageContainer.id = 'specialMessage';
            messageContainer.style.cssText = `
                margin: 20px 0;
                padding: 15px;
                border-radius: 10px;
                text-align: center;
                font-size: 1.2em;
                font-weight: bold;
            `;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
            const buttonsContainer = this.getElement('results-buttons');
            if (buttonsContainer) {
                buttonsContainer.parentNode.insertBefore(messageContainer, buttonsContainer);
            }
        }
        
        if (percentage === 100) {
            messageContainer.textContent = 'üéâ –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! üéâ';
            messageContainer.style.background = 'linear-gradient(45deg, #4CAF50, #45a049)';
            messageContainer.style.color = 'white';
        } else if (percentage >= 80) {
            messageContainer.textContent = 'üëè –û–¢–õ–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–ê! üëè';
            messageContainer.style.background = 'linear-gradient(45deg, #2196F3, #1976D2)';
            messageContainer.style.color = 'white';
        } else if (percentage >= 60) {
            messageContainer.textContent = 'üëç –•–û–†–û–®–û! üëç';
            messageContainer.style.background = 'linear-gradient(45deg, #FF9800, #F57C00)';
            messageContainer.style.color = 'white';
        } else {
            messageContainer.textContent = 'üí™ –ü–†–û–î–û–õ–ñ–ê–ô–¢–ï –¢–†–ï–ù–ò–†–û–í–ê–¢–¨–°–Ø! üí™';
            messageContainer.style.background = 'linear-gradient(45deg, #9C27B0, #7B1FA2)';
            messageContainer.style.color = 'white';
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(milliseconds) {
        const minutes = Math.floor(milliseconds / 60000);
        const seconds = Math.floor((milliseconds % 60000) / 1000);
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    loadLastResult() {
        console.log('üìä [ResultsScreen] –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
        const history = this.storageService.loadGameHistory();
        
        if (history.length > 0) {
            const lastResult = history[history.length - 1];
            this.displayResults(lastResult);
        } else {
            console.log('üìä [ResultsScreen] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞');
        }
    }

    /**
     * –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
     */
    playAgain() {
        console.log('üîÑ [ResultsScreen] –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞');
        this.app.showScreen('settings');
    }

    /**
     * –ù–æ–≤–∞—è –∏–≥—Ä–∞
     */
    newGame() {
        console.log('üÜï [ResultsScreen] –ù–æ–≤–∞—è –∏–≥—Ä–∞');
        this.app.showScreen('settings');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showStatistics() {
        console.log('üìà [ResultsScreen] –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        this.app.showScreen('stats');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerStatistics() {
        return this.storageService.getPlayerStatistics();
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    exportResults() {
        if (!this.gameResult) {
            alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        const data = this.storageService.exportData();
        if (data) {
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `math-game-results-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            console.log('üì§ [ResultsScreen] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä?')) {
            this.storageService.clearGameHistory();
            alert('–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —É–¥–∞–ª–µ–Ω–∞');
            console.log('üóëÔ∏è [ResultsScreen] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –æ—á–∏—â–µ–Ω–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    showCompositionResults(results) {
        console.log('üìä [ResultsScreen] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞:', results);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.getElement('resultsTitle');
        if (title) {
            title.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.displayCompositionResults(results);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    displayCompositionResults(results) {
        const container = this.element.querySelector('.screen-content');
        if (!container) return;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        container.innerHTML = `
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"</h2>
            
            <div class="composition-results">
                <div class="final-score">
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <span class="score-value">${results.correctAnswers}</span>
                </div>
                <div class="final-score">
                    –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <span class="score-value">${results.incorrectAnswers}</span>
                </div>
                <div class="final-time">
                    –í—Ä–µ–º—è –∏–≥—Ä—ã: <span class="time-value">${this.formatTime(results.gameTime)}</span>
                </div>
            </div>
            
            ${results.wrongExamples.length > 0 ? this.displayWrongExamples(results.wrongExamples) : ''}
            
            <div class="screen-buttons">
                <button id="playAgain" class="btn btn-primary">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                <button id="newGameFromResults" class="btn btn-secondary">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                <button id="showStats" class="btn btn-info">–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
            </div>
        `;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
     */
    displayWrongExamples(wrongExamples) {
        let html = '<div class="wrong-examples"><h3>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</h3><ul>';
        
        wrongExamples.forEach(example => {
            html += `
                <li>
                    <span class="example-text">${example.example}</span>
                    <span class="user-answer">–í–∞—à –æ—Ç–≤–µ—Ç: ${example.userAnswer}</span>
                    <span class="correct-answer">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${example.correctAnswer}</span>
                </li>
            `;
        });
        
        html += '</ul></div>';
        return html;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(milliseconds) {
        const minutes = Math.floor(milliseconds / 60000);
        const seconds = Math.floor((milliseconds % 60000) / 1000);
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
}
