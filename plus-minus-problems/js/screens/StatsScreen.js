/**
 * –≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
 */
class StatsScreen extends BaseScreen {
    constructor(app) {
        super(app, 'stats');
        this.storageService = app.services.storage;
        this.statistics = null;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        super.bindEvents();
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        this.addEventListener('backToSettings', 'click', () => {
            this.backToSettings();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.addEventListener('clearStats', 'click', () => {
            this.clearStatistics();
        });

        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        this.addEventListener('exportData', 'click', () => {
            this.exportData();
        });

        // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        this.addEventListener('importData', 'click', () => {
            this.importData();
        });

        console.log('üìà [StatsScreen] –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
     */
    onShow() {
        console.log('üìà [StatsScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        this.loadStatistics();
        this.displayStatistics();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    loadStatistics() {
        console.log('üìà [StatsScreen] –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        const currentPlayer = this.storageService.loadPlayerName();
        this.statistics = this.storageService.getPlayerStatistics(currentPlayer);
        console.log('üìà [StatsScreen] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', currentPlayer, ':', this.statistics);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    displayStatistics() {
        if (!this.statistics) {
            console.log('üìà [StatsScreen] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            this.displayEmptyStats();
            return;
        }

        console.log('üìà [StatsScreen] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
        const playerName = this.statistics.playerName || '–ò–≥—Ä–æ–∫';
        const headerElement = this.element.querySelector('h2');
        if (headerElement) {
            headerElement.textContent = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞: ${playerName}`;
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.setText('totalGames', this.statistics.totalGames);
        this.setText('bestScore', this.statistics.bestScore);
        this.setText('averageScore', this.statistics.averageScore);
        this.setText('perfectGames', this.statistics.perfectGames);
        this.setText('averageTime', this.formatTime(this.statistics.averageTime));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏–≥—Ä
        if (this.statistics.compositionGames !== undefined) {
            this.setText('compositionGames', this.statistics.compositionGames);
        }
        if (this.statistics.regularGames !== undefined) {
            this.setText('regularGames', this.statistics.regularGames);
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞
        if (this.statistics.lastPlayed) {
            const lastPlayedDate = new Date(this.statistics.lastPlayed);
            this.setText('lastPlayed', lastPlayedDate.toLocaleDateString('ru-RU'));
        } else {
            this.setText('lastPlayed', '–ù–∏–∫–æ–≥–¥–∞');
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
        this.displayDailyStats();
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
        this.displayRecentGames();
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.displayProgress();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    displayEmptyStats() {
        const currentPlayer = this.storageService.loadPlayerName();
        const playerName = currentPlayer || '–ò–≥—Ä–æ–∫';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
        const headerElement = this.element.querySelector('h2');
        if (headerElement) {
            headerElement.textContent = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞: ${playerName}`;
        }
        
        this.setText('totalGames', '0');
        this.setText('bestScore', '0');
        this.setText('averageScore', '0');
        this.setText('perfectGames', '0');
        this.setText('averageTime', '00:00');
        this.setText('lastPlayed', '–ù–∏–∫–æ–≥–¥–∞');
        
        const recentGamesList = this.getElement('recentGamesList');
        if (recentGamesList) {
            recentGamesList.innerHTML = `<li>–£ –∏–≥—Ä–æ–∫–∞ "${playerName}" –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä</li>`;
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
     */
    displayDailyStats() {
        const dailyStatsList = this.getElement('dailyStatsList');
        if (!dailyStatsList || !this.statistics.recentGames) return;
        
        dailyStatsList.innerHTML = '';
        
        if (this.statistics.recentGames.length === 0) {
            dailyStatsList.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–∞–º
        const gamesByDate = {};
        this.statistics.recentGames.forEach(game => {
            const date = new Date(game.timestamp).toLocaleDateString('ru-RU');
            if (!gamesByDate[date]) {
                gamesByDate[date] = {
                    games: [],
                    totalExamples: 0,
                    totalScore: 0,
                    totalTime: 0
                };
            }
            gamesByDate[date].games.push(game);
            gamesByDate[date].totalExamples += game.totalExamples;
            gamesByDate[date].totalScore += game.score;
            gamesByDate[date].totalTime += game.time;
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        const sortedDates = Object.keys(gamesByDate).sort((a, b) => {
            return new Date(b.split('.').reverse().join('-')) - new Date(a.split('.').reverse().join('-'));
        });
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        sortedDates.forEach(date => {
            const dayData = gamesByDate[date];
            const dayContainer = document.createElement('div');
            dayContainer.className = 'daily-stat-item';
            
            const percentage = Math.round((dayData.totalScore / dayData.totalExamples) * 100);
            const avgTime = Math.round(dayData.totalTime / dayData.games.length);
            
            dayContainer.innerHTML = `
                <div class="daily-stat-header">
                    <div class="daily-date">${date}</div>
                    <div class="daily-games-count">${dayData.games.length} –∏–≥—Ä</div>
                </div>
                <div class="daily-stat-details">
                    <div class="daily-total-examples">–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: ${dayData.totalExamples}</div>
                    <div class="daily-correct-answers">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${dayData.totalScore} (${percentage}%)</div>
                    <div class="daily-avg-time">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${this.formatTime(avgTime)}</div>
                </div>
            `;
            
            dayContainer.style.cssText = `
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                margin: 10px 0;
                background: rgba(255, 255, 255, 0.1);
            `;
            
            dailyStatsList.appendChild(dayContainer);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
     */
    createGamesTable() {
        const recentGamesSection = document.querySelector('.recent-games');
        if (!recentGamesSection) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingTable = recentGamesSection.querySelector('table');
        if (existingTable) {
            existingTable.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        const table = document.createElement('table');
        table.className = 'games-table';
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>–î–∞—Ç–∞</th>
                <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                <th>–í—Ä–µ–º—è</th>
                <th>–¢–∏–ø</th>
                <th>–ú–∞–∫—Å. —á–∏—Å–ª–æ</th>
                <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
            </tr>
        `;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        const tbody = document.createElement('tbody');
        tbody.id = 'gamesTableBody';
        
        table.appendChild(thead);
        table.appendChild(tbody);
        
        // –ó–∞–º–µ–Ω—è–µ–º ul –Ω–∞ table
        const ul = recentGamesSection.querySelector('ul');
        if (ul) {
            recentGamesSection.replaceChild(table, ul);
        } else {
            recentGamesSection.appendChild(table);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
     */
    displayRecentGames() {
        if (!this.statistics.recentGames) return;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        this.createGamesTable();
        
        const tbody = document.getElementById('gamesTableBody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        if (this.statistics.recentGames.length === 0) {
            const tr = document.createElement('tr');
            tr.innerHTML = '<td colspan="6" class="no-games">–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞</td>';
            tbody.appendChild(tr);
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É) –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const sortedGames = this.statistics.recentGames
            .slice()
            .sort((a, b) => {
                const dateA = new Date(a.date || a.timestamp);
                const dateB = new Date(b.date || b.timestamp);
                return dateB - dateA; // –ù–æ–≤—ã–µ –∏–≥—Ä—ã —Å–≤–µ—Ä—Ö—É
            });
        
        console.log('üìÖ [StatsScreen] –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', sortedGames.map(game => ({
            id: game.id,
            type: game.type || 'regular',
            date: game.date || game.timestamp
        })));
        
        sortedGames.forEach(game => {
            const tr = document.createElement('tr');
            const gameDate = new Date(game.date || game.timestamp).toLocaleDateString('ru-RU');
            
            let gameTime, result, gameType, maxNumber;
            
            if (game.type === 'composition') {
                // –ò–≥—Ä–∞ "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
                gameTime = this.formatTime(game.gameTime);
                const totalAnswers = game.correctAnswers + game.incorrectAnswers;
                const percentage = totalAnswers > 0 ? Math.round((game.correctAnswers / totalAnswers) * 100) : 0;
                result = `${game.correctAnswers}/${totalAnswers} (${percentage}%)`;
                gameType = '–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞';
                maxNumber = game.range || (game.minNumber && game.maxNumber ? `${game.minNumber}-${game.maxNumber}` : '–î–∏–∞–ø–∞–∑–æ–Ω');
            } else {
                // –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞
                gameTime = this.formatTime(game.time);
                const percentage = Math.round((game.score / game.totalExamples) * 100);
                result = `${game.score}/${game.totalExamples} (${percentage}%)`;
                gameType = this.getOperationTypeName(game.operationType);
                maxNumber = `–î–æ ${game.maxNumber}`;
            }
            
            tr.innerHTML = `
                <td>${gameDate}</td>
                <td>${result}</td>
                <td>${gameTime}</td>
                <td>${gameType}</td>
                <td>${maxNumber}</td>
                <td><button class="delete-game-btn" data-game-id="${game.id}" title="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É">√ó</button></td>
            `;
            
            tbody.appendChild(tr);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        this.addDeleteGameListeners();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä
     */
    addDeleteGameListeners() {
        const deleteButtons = document.querySelectorAll('.delete-game-btn');
        console.log('üîó [StatsScreen] –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è:', deleteButtons.length);
        
        deleteButtons.forEach(button => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            button.removeEventListener('click', this.handleDeleteClick);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                const gameId = parseInt(button.getAttribute('data-game-id'));
                console.log('üóëÔ∏è [StatsScreen] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã ID:', gameId);
                this.deleteGame(gameId);
            });
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
     */
    deleteGame(gameId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏?')) {
            console.log('üóëÔ∏è [StatsScreen] –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Å ID:', gameId);
            
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ localStorage
            const success = this.storageService.deleteGameById(gameId);
            
            if (success) {
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                console.log('üîÑ [StatsScreen] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
                this.loadStatistics();
                this.displayStatistics();
                console.log('‚úÖ [StatsScreen] –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            } else {
                console.error('‚ùå [StatsScreen] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã');
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.');
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    displayProgress() {
        const progressContainer = this.getElement('progressContainer');
        if (!progressContainer || !this.statistics) return;
        
        const totalGames = this.statistics.totalGames;
        const perfectGames = this.statistics.perfectGames;
        const perfectPercentage = totalGames > 0 ? Math.round((perfectGames / totalGames) * 100) : 0;
        
        progressContainer.innerHTML = `
            <div class="progress-item">
                <div class="progress-label">–ò–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${perfectPercentage}%"></div>
                </div>
                <div class="progress-text">${perfectGames}/${totalGames} (${perfectPercentage}%)</div>
            </div>
        `;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(milliseconds) {
        const minutes = Math.floor(milliseconds / 60000);
        const seconds = Math.floor((milliseconds % 60000) / 1000);
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    getOperationTypeName(operationType) {
        const names = {
            'addition': '–°–ª–æ–∂–µ–Ω–∏–µ',
            'subtraction': '–í—ã—á–∏—Ç–∞–Ω–∏–µ',
            'both': '–°–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ'
        };
        return names[operationType] || operationType;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
     */
    backToSettings() {
        console.log('üîô [StatsScreen] –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º');
        this.app.showScreen('settings');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    clearStatistics() {
        const currentPlayer = this.storageService.loadPlayerName();
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ "${currentPlayer}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            this.storageService.clearPlayerStatistics(currentPlayer);
            alert(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ "${currentPlayer}" —É–¥–∞–ª–µ–Ω–∞`);
            this.loadStatistics();
            this.displayStatistics();
            console.log('üóëÔ∏è [StatsScreen] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞', currentPlayer, '–æ—á–∏—â–µ–Ω–∞');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    exportData() {
        const data = this.storageService.exportData();
        if (data) {
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `math-game-data-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            console.log('üì§ [StatsScreen] –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
            alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    importData() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const success = this.storageService.importData(e.target.result);
                        if (success) {
                            alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
                            this.loadStatistics();
                            this.displayStatistics();
                        } else {
                            alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
                        }
                    } catch (error) {
                        alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
                        console.error('‚ùå [StatsScreen] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                    }
                };
                reader.readAsText(file);
            }
        };
        
        input.click();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getDetailedStats() {
        const history = this.storageService.loadGameHistory();
        
        if (history.length === 0) {
            return null;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        const dailyStats = {};
        history.forEach(game => {
            const date = new Date(game.timestamp).toDateString();
            if (!dailyStats[date]) {
                dailyStats[date] = { games: 0, totalScore: 0, totalTime: 0 };
            }
            dailyStats[date].games++;
            dailyStats[date].totalScore += game.score;
            dailyStats[date].totalTime += game.time;
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
        const operationStats = {};
        history.forEach(game => {
            if (!operationStats[game.operationType]) {
                operationStats[game.operationType] = { games: 0, totalScore: 0 };
            }
            operationStats[game.operationType].games++;
            operationStats[game.operationType].totalScore += game.score;
        });
        
        return {
            dailyStats,
            operationStats,
            totalGames: history.length,
            averageScore: Math.round(history.reduce((sum, game) => sum + game.score, 0) / history.length),
            bestScore: Math.max(...history.map(game => game.score))
        };
    }
}
