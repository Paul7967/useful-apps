/**
 * –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
 */
class CompositionGameScreen extends BaseScreen {
    constructor(app) {
        super(app, 'composition-game');
        this.storageService = app.services.storage;
        this.timerService = app.services.timer;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.currentNumber = 0;
        this.numberRange = [];
        this.originalRange = { min: 1, max: 20 }; // –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.repetitions = 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        this.currentRepetition = 1; // –¢–µ–∫—É—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        this.currentNumberIndex = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ
        this.selectedButtons = new Set();
        this.gameStartTime = null;
        this.correctAnswers = 0;
        this.incorrectAnswers = 0;
        this.wrongExamples = [];
        this.totalExamples = 0; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        this.remainingExamples = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        super.bindEvents();
        
        // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ"
        this.addEventListener('nextCompositionNumber', 'click', () => {
            this.nextNumber();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        this.addEventListener('restartComposition', 'click', () => {
            this.restartGame();
        });

        console.log('üéÆ [CompositionGameScreen] –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
     */
    onShow() {
        console.log('üéÆ [CompositionGameScreen] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞');
    }

    /**
     * –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
     */
    startGame(range, repetitions = 1) {
        console.log('üéÆ [CompositionGameScreen] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º:', range, '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:', repetitions);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        this.repetitions = repetitions;
        this.currentRepetition = 1;
        
        // –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
        this.parseRange(range);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        this.initializeGame();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
        this.generateNextNumber();
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
     */
    parseRange(range) {
        const [min, max] = range.split('-').map(Number);
        this.originalRange = { min, max }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
        this.numberRange = [];
        for (let repetition = 1; repetition <= this.repetitions; repetition++) {
            for (let i = min; i <= max; i++) {
                this.numberRange.push(i);
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —á–∏—Å–ª–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        this.shuffleArray(this.numberRange);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: ((a1-a2)/2+1)*(a2-a1+1)*n
        this.totalExamples = this.calculateTotalExamples(min, max, this.repetitions);
        this.remainingExamples = this.totalExamples;
        
        console.log('üî¢ [CompositionGameScreen] –î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª:', this.numberRange);
        console.log('üî¢ [CompositionGameScreen] –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:', this.originalRange);
        console.log('üî¢ [CompositionGameScreen] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:', this.repetitions);
        console.log('üî¢ [CompositionGameScreen] –í—Å–µ–≥–æ —á–∏—Å–µ–ª:', this.numberRange.length);
        console.log('üî¢ [CompositionGameScreen] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤:', this.totalExamples);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: ((a2-a1)/2+1)*(a2-a1+1)*n
     */
    calculateTotalExamples(min, max, repetitions) {
        const rangeSize = max - min + 1;
        const examplesPerNumber = (max + min) / 2 + 1;
        const totalExamples = examplesPerNumber * rangeSize * repetitions;
        
        console.log({rangeSize, examplesPerNumber, totalExamples});
        

        console.log('üßÆ [CompositionGameScreen] –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤:', {
            min: min,
            max: max,
            repetitions: repetitions,
            rangeSize: rangeSize,
            examplesPerNumber: examplesPerNumber,
            totalExamples: totalExamples
        });
        
        return totalExamples;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
     */
    initializeGame() {
        this.selectedButtons.clear();
        this.correctAnswers = 0;
        this.incorrectAnswers = 0;
        this.wrongExamples = [];
        this.gameStartTime = Date.now();
        this.remainingExamples = this.totalExamples;
        this.currentNumberIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        this.currentRepetition = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const rangeText = `${this.originalRange.min} - ${this.originalRange.max}`;
        this.setText('currentRange', rangeText);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        this.setText('currentRepetition', this.currentRepetition);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤
        this.setText('remainingExamples', this.remainingExamples);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.start();
        this.updateTimer();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞
     */
    generateNextNumber() {
        if (this.currentNumberIndex >= this.numberRange.length) {
            this.endGame();
            return;
        }
        
        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        this.currentNumber = this.numberRange[this.currentNumberIndex];
        this.currentNumberIndex++;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        const numbersInRange = this.originalRange.max - this.originalRange.min + 1;
        this.currentRepetition = Math.ceil(this.currentNumberIndex / numbersInRange);
        
        console.log('üî¢ [CompositionGameScreen] –ù–æ–≤–æ–µ —á–∏—Å–ª–æ:', this.currentNumber, '–∏–Ω–¥–µ–∫—Å:', this.currentNumberIndex - 1, '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:', this.currentRepetition);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.setText('currentNumber', this.currentNumber);
        this.setText('currentRepetition', this.currentRepetition);
        this.selectedButtons.clear();
        this.setText('selectedCount', '0');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
        console.log('üéØ [CompositionGameScreen] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —á–∏—Å–ª–∞:', this.currentNumber);
        this.generateExamples();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
     */
    generateExamples() {
        const examplesContainer = this.getElement('compositionExamples');
        if (!examplesContainer) {
            console.error('‚ùå [CompositionGameScreen] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä compositionExamples –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üéØ [CompositionGameScreen] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤...');
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        examplesContainer.innerHTML = '';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (—Å—É–º–º–∞ = —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ)
        const correctExamples = this.generateCorrectExamples();
        console.log('‚úÖ [CompositionGameScreen] –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', correctExamples.length);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (—Å—É–º–º–∞ ¬±1, ¬±2 –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞)
        const incorrectExamples = this.generateIncorrectExamples();
        console.log('‚ùå [CompositionGameScreen] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', incorrectExamples.length);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        const allExamples = [...correctExamples, ...incorrectExamples];
        this.shuffleArray(allExamples);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º—É–ª–µ: (—á–∏—Å–ª–æ + 2) * 1.6
        const maxExamples = Math.ceil((this.currentNumber + 2) * 1.6);
        const limitedExamples = allExamples.slice(0, maxExamples);
        
        console.log('üéØ [CompositionGameScreen] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤:', maxExamples);
        console.log('üéØ [CompositionGameScreen] –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ:', limitedExamples.length);
        
        console.log('üéØ [CompositionGameScreen] –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤:', limitedExamples.length);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        limitedExamples.forEach((example, index) => {
            const button = document.createElement('button');
            button.className = 'composition-example-btn';
            button.textContent = example.text;
            button.dataset.result = example.result;
            button.dataset.isCorrect = example.isCorrect;
            button.dataset.index = index;
            
            button.addEventListener('click', () => {
                this.toggleButton(button);
            });
            
            examplesContainer.appendChild(button);
        });
        
        console.log('üéØ [CompositionGameScreen] –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ DOM');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
     */
    generateCorrectExamples() {
        const examples = [];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
        for (let i = 0; i <= this.currentNumber; i++) {
            const j = this.currentNumber - i;
            examples.push({
                text: `${i} + ${j}`,
                result: this.currentNumber,
                isCorrect: true
            });
        }
        
        return examples;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
     */
    generateIncorrectExamples() {
        const examples = [];
        const targetNumber = this.currentNumber;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ¬±1, ¬±2 –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —á–∏—Å–ª–∞
        const offsets = [-2, -1, 1, 2];
        
        for (const offset of offsets) {
            const result = targetNumber + offset;
            if (result < 0) continue; // –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ 1 –ø—Ä–∏–º–µ—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ offset
            const a = Math.floor(Math.random() * Math.max(1, result));
            const b = result - a;
            if (b >= 0) {
                examples.push({
                    text: `${a} + ${b}`,
                    result: result,
                    isCorrect: false
                });
            }
        }
        
        return examples;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     */
    toggleButton(button) {
        const index = button.dataset.index;
        
        if (this.selectedButtons.has(index)) {
            // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            this.selectedButtons.delete(index);
            button.classList.remove('selected');
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤
            this.remainingExamples++;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            this.selectedButtons.add(index);
            button.classList.add('selected');
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤
            this.remainingExamples--;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.setText('selectedCount', this.selectedButtons.size);
        this.setText('remainingExamples', this.remainingExamples);
        
        console.log('üî¢ [CompositionGameScreen] –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤:', this.remainingExamples);
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É
     */
    nextNumber() {
        console.log('‚û°Ô∏è [CompositionGameScreen] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É');
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
        this.calculateResults();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ
        this.generateNextNumber();
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
     */
    calculateResults() {
        const buttons = this.element.querySelectorAll('.composition-example-btn');
        
        buttons.forEach(button => {
            const isSelected = this.selectedButtons.has(button.dataset.index);
            const isCorrect = button.dataset.isCorrect === 'true';
            const result = parseInt(button.dataset.result);
            
            if (isCorrect && isSelected) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
                this.correctAnswers++;
            } else if (isCorrect && !isSelected) {
                // –ù–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
                this.incorrectAnswers++;
                this.wrongExamples.push({
                    example: button.textContent,
                    userAnswer: '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ',
                    correctAnswer: '–≤—ã–±—Ä–∞—Ç—å'
                });
            } else if (!isCorrect && isSelected) {
                // –í—ã–±—Ä–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
                this.incorrectAnswers++;
                this.wrongExamples.push({
                    example: button.textContent,
                    userAnswer: '–≤—ã–±—Ä–∞–Ω–æ',
                    correctAnswer: '–Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å'
                });
            }
        });
        
        console.log('üìä [CompositionGameScreen] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
            correct: this.correctAnswers,
            incorrect: this.incorrectAnswers
        });
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    endGame() {
        console.log('üèÅ [CompositionGameScreen] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.saveGameResults();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.app.showCompositionResults({
            correctAnswers: this.correctAnswers,
            incorrectAnswers: this.incorrectAnswers,
            wrongExamples: this.wrongExamples,
            gameTime: this.timerService.getElapsedTime()
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
     */
    saveGameResults() {
        const gameData = {
            id: Date.now(),
            date: new Date().toISOString(),
            type: 'composition',
            correctAnswers: this.correctAnswers,
            incorrectAnswers: this.incorrectAnswers,
            gameTime: this.timerService.getElapsedTime(),
            playerName: this.storageService.loadPlayerName(),
            range: this.originalRange ? `${this.originalRange.min}-${this.originalRange.max}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            minNumber: this.originalRange ? this.originalRange.min : null,
            maxNumber: this.originalRange ? this.originalRange.max : null,
            repetitions: this.repetitions
        };
        
        this.storageService.saveCompositionGame(gameData);
        console.log('üíæ [CompositionGameScreen] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', gameData);
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    restartGame() {
        console.log('üîÑ [CompositionGameScreen] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.timerService.stop();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.app.showScreen('composition');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
     */
    updateTimer() {
        const elapsed = this.timerService.getElapsedTime();
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        const timeText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        this.setText('compositionTimer', timeText);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        if (this.timerService.isRunning) {
            setTimeout(() => this.updateTimer(), 1000);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
     */
    shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }
}
