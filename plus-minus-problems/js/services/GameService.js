/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
 */
class GameService {
    constructor() {
        this.currentExample = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        this.maxNumber = 10;
        this.totalExamples = 5;
        this.operationType = 'addition';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    initGame(settings) {
        console.log('üéÆ [GameService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);
        
        this.maxNumber = settings.maxNumber || 10;
        this.totalExamples = settings.examplesCount || 5;
        this.operationType = settings.operationType || 'addition';
        
        this.currentExample = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
        
        this.generateExamples();
        console.log(`üéÆ [GameService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${this.examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—É–Ω–¥–∞
     */
    generateExamples() {
        console.log('üîÑ [GameService] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
        this.examples = [];
        let hasZeroResult = false;
        
        for (let i = 0; i < this.totalExamples; i++) {
            console.log(`üîÑ [GameService] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä ${i + 1}/${this.totalExamples}`);
            const example = this.generateRandomExample(hasZeroResult);
            console.log(`üîÑ [GameService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä: ${example.text} = ${example.correctAnswer}`);
            this.examples.push(example);
            
            // –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0
            if (example.correctAnswer === 0) {
                hasZeroResult = true;
                console.log('üîÑ [GameService] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0, –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
            }
        }
        console.log(`üîÑ [GameService] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ ${this.examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
     */
    generateRandomExample(hasZeroResult = false) {
        console.log('üé≤ [GameService] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞');
        console.log(`üé≤ [GameService] –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${this.operationType}, hasZeroResult: ${hasZeroResult}`);
        
        let operation;
        switch(this.operationType) {
            case 'addition':
                operation = 'addition';
                break;
            case 'subtraction':
                operation = 'subtraction';
                break;
            case 'both':
                operation = Math.random() < 0.5 ? 'addition' : 'subtraction';
                break;
            default:
                operation = 'addition';
        }
        
        console.log(`üé≤ [GameService] –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation}`);
        
        if (operation === 'addition') {
            return this.generateAdditionExample();
        } else {
            return this.generateSubtractionExample(hasZeroResult);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Å–ª–æ–∂–µ–Ω–∏–µ
     */
    generateAdditionExample() {
        console.log('üé≤ [GameService] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞ —Å–ª–æ–∂–µ–Ω–∏–µ');
        // –î–ª—è —Å–ª–æ–∂–µ–Ω–∏—è: –æ–±–∞ —Å–ª–∞–≥–∞–µ–º—ã—Ö –∏ —Å—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å maxNumber
        const a = Math.floor(Math.random() * this.maxNumber) + 1;
        const maxB = this.maxNumber - a;
        const b = Math.floor(Math.random() * maxB) + 1;
        const result = a + b;
        
        console.log(`üé≤ [GameService] –°–ª–æ–∂–µ–Ω–∏–µ: a=${a}, b=${b}, result=${result}`);
        
        return {
            type: 'addition',
            a: a,
            b: b,
            result: result,
            text: `${a} + ${b} = `,
            correctAnswer: result
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–µ
     */
    generateSubtractionExample(hasZeroResult = false) {
        console.log('üé≤ [GameService] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–µ');
        // –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è: —É–º–µ–Ω—å—à–∞–µ–º–æ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å maxNumber
        let a = Math.floor(Math.random() * this.maxNumber) + 1;
        console.log(`üé≤ [GameService] –£–º–µ–Ω—å—à–∞–µ–º–æ–µ a = ${a}`);
        
        // –í—ã—á–∏—Ç–∞–µ–º–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —É–º–µ–Ω—å—à–∞–µ–º–æ–≥–æ
        let b = Math.floor(Math.random() * a) + 1;
        let result = a - b;
        console.log(`üé≤ [GameService] –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: a=${a}, b=${b}, result=${result}`);
        
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0 —É–∂–µ –±—ã–ª –≤ —Ä–∞—É–Ω–¥–µ, –∏–∑–±–µ–≥–∞–µ–º –µ–≥–æ
        if (hasZeroResult && result === 0) {
            console.log('üé≤ [GameService] –†–µ–∑—É–ª—å—Ç–∞—Ç 0, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–±–µ–∂–∞—Ç—å');
            // –ï—Å–ª–∏ a = 1, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 0, –ø–æ—ç—Ç–æ–º—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ a
            if (a === 1) {
                console.log('üé≤ [GameService] a=1, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ a');
                a = Math.floor(Math.random() * this.maxNumber) + 2; // –ú–∏–Ω–∏–º—É–º 2
                console.log(`üé≤ [GameService] –ù–æ–≤–æ–µ a = ${a}`);
            }
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç > 0
            let attempts = 0;
            do {
                attempts++;
                console.log(`üé≤ [GameService] –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–±–µ–∂–∞—Ç—å 0, –∏—Ç–µ—Ä–∞—Ü–∏—è ${attempts}`);
                b = Math.floor(Math.random() * a) + 1;
                result = a - b;
                console.log(`üé≤ [GameService] –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: a=${a}, b=${b}, result=${result}`);
                
                if (attempts > 100) {
                    console.error('üö® [GameService] –ü–†–ï–í–´–®–ï–ù–û –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ü–´–¢–û–ö! –í–æ–∑–º–æ–∂–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!');
                    break;
                }
            } while (result === 0);
            console.log(`üé≤ [GameService] –¶–∏–∫–ª –∏–∑–±–µ–∂–∞–Ω–∏—è 0 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
        }
        
        return {
            type: 'subtraction',
            a: a,
            b: b,
            result: result,
            text: `${a} - ${b} = `,
            correctAnswer: result
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
     */
    getCurrentExample() {
        if (this.currentExample >= this.examples.length) {
            return null;
        }
        return this.examples[this.currentExample];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    checkAnswer(userAnswer) {
        const currentExample = this.getCurrentExample();
        if (!currentExample) {
            return { correct: false, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞' };
        }

        const userNum = parseInt(userAnswer);
        if (isNaN(userNum)) {
            return { correct: false, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ' };
        }

        const isCorrect = userNum === currentExample.correctAnswer;
        
        if (isCorrect) {
            this.score++;
            console.log(`‚úÖ [GameService] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –°—á–µ—Ç: ${this.score}`);
        } else {
            this.wrongExamples.push({
                example: currentExample,
                userAnswer: userNum
            });
            console.log(`‚ùå [GameService] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${this.wrongExamples.length}`);
        }

        return {
            correct: isCorrect,
            correctAnswer: currentExample.correctAnswer,
            userAnswer: userNum,
            score: this.score
        };
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É
     */
    nextExample() {
        this.currentExample++;
        console.log(`‚û°Ô∏è [GameService] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–º–µ—Ä—É ${this.currentExample + 1}/${this.totalExamples}`);
        return this.getCurrentExample();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
     */
    isGameFinished() {
        return this.currentExample >= this.totalExamples;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
     */
    getGameResults() {
        return {
            score: this.score,
            totalExamples: this.totalExamples,
            wrongExamples: this.wrongExamples,
            percentage: Math.round((this.score / this.totalExamples) * 100)
        };
    }

    /**
     * –°–±—Ä–æ—Å –∏–≥—Ä—ã
     */
    resetGame() {
        console.log('üîÑ [GameService] –°–±—Ä–æ—Å –∏–≥—Ä—ã');
        this.currentExample = 0;
        this.score = 0;
        this.examples = [];
        this.wrongExamples = [];
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    restartGame() {
        console.log('üîÑ [GameService] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
        this.resetGame();
        this.generateExamples();
    }
}
