/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
 */
class StorageService {
    constructor() {
        this.keys = {
            playerName: 'mathGamePlayerName',
            settings: 'mathGameSettings',
            gameHistory: 'mathGameHistory',
            statistics: 'mathGameStatistics',
            compositionRange: 'mathGameCompositionRange',
            compositionGames: 'mathGameCompositionGames',
            compositionSettings: 'mathGameCompositionSettings',
            currentScreen: 'mathGameCurrentScreen'
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     */
    savePlayerName(name) {
        if (name && name.trim()) {
            localStorage.setItem(this.keys.playerName, name.trim());
            console.log('üíæ [StorageService] –ò–º—è –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', name.trim());
            return true;
        }
        return false;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     */
    loadPlayerName() {
        const name = localStorage.getItem(this.keys.playerName);
        console.log('üì• [StorageService] –ò–º—è –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', name || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return name || '';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    saveGameSettings(settings) {
        try {
            const settingsData = {
                maxNumber: settings.maxNumber || 10,
                examplesCount: settings.examplesCount || 5,
                operationType: settings.operationType || 'addition',
                timestamp: Date.now()
            };
            
            localStorage.setItem(this.keys.settings, JSON.stringify(settingsData));
            console.log('üíæ [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settingsData);
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    loadGameSettings() {
        try {
            const saved = localStorage.getItem(this.keys.settings);
            if (saved) {
                const settings = JSON.parse(saved);
                console.log('üì• [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
                return settings;
            }
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultSettings = {
            maxNumber: 10,
            examplesCount: 5,
            operationType: 'addition'
        };
        console.log('üì• [StorageService] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultSettings);
        return defaultSettings;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    saveGameResult(gameResult) {
        try {
            const history = this.loadGameHistory();
            
            const result = {
                id: Date.now(),
                timestamp: new Date().toISOString(),
                playerName: gameResult.playerName || '–ò–≥—Ä–æ–∫',
                score: gameResult.score,
                totalExamples: gameResult.totalExamples,
                time: gameResult.time,
                operationType: gameResult.operationType,
                maxNumber: gameResult.maxNumber,
                percentage: gameResult.percentage,
                wrongExamples: gameResult.wrongExamples || []
            };
            
            history.push(result);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∏–≥—Ä–∞–º–∏
            if (history.length > 100) {
                history.splice(0, history.length - 100);
            }
            
            localStorage.setItem(this.keys.gameHistory, JSON.stringify(history));
            console.log('üíæ [StorageService] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
     */
    loadGameHistory() {
        try {
            const saved = localStorage.getItem(this.keys.gameHistory);
            if (saved) {
                const history = JSON.parse(saved);
                console.log('üì• [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', history.length, '–∏–≥—Ä');
                return history;
            }
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
        }
        
        console.log('üì• [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞');
        return [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerStatistics(playerName = null) {
        const history = this.loadGameHistory();
        const compositionHistory = this.loadCompositionGames();
        
        // –ï—Å–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è
        if (!playerName) {
            playerName = this.loadPlayerName();
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
        const playerHistory = history.filter(game => game.playerName === playerName);
        const playerCompositionHistory = compositionHistory.filter(game => game.playerName === playerName);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const allGames = [...playerHistory, ...playerCompositionHistory]
            .sort((a, b) => {
                const dateA = new Date(a.date || a.timestamp);
                const dateB = new Date(b.date || b.timestamp);
                return dateB - dateA; // –ù–æ–≤—ã–µ –∏–≥—Ä—ã —Å–≤–µ—Ä—Ö—É
            });
        
        if (allGames.length === 0) {
            return {
                totalGames: 0,
                bestScore: 0,
                averageScore: 0,
                totalTime: 0,
                averageTime: 0,
                perfectGames: 0,
                lastPlayed: null,
                playerName: playerName,
                compositionGames: 0,
                regularGames: 0
            };
        }

        const totalGames = allGames.length;
        const regularGames = playerHistory.length;
        const compositionGames = playerCompositionHistory.length;
        
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º score, –¥–ª—è –∏–≥—Ä "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞" - correctAnswers
        const scores = allGames.map(game => {
            if (game.type === 'composition') {
                return game.correctAnswers || 0;
            }
            return game.score || 0;
        });
        
        const times = allGames.map(game => {
            if (game.type === 'composition') {
                return game.gameTime || 0;
            }
            return game.time || 0;
        });
        
        const bestScore = Math.max(...scores);
        const averageScore = Math.round(scores.reduce((a, b) => a + b, 0) / totalGames);
        const totalTime = times.reduce((a, b) => a + b, 0);
        const averageTime = Math.round(totalTime / totalGames);
        
        // –î–ª—è perfectGames —Å—á–∏—Ç–∞–µ–º –∏–≥—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        const maxPossibleScore = Math.max(...scores);
        const perfectGames = scores.filter(score => score === maxPossibleScore).length;
        
        const lastPlayed = allGames[allGames.length - 1].date || allGames[allGames.length - 1].timestamp;

        const statistics = {
            totalGames,
            bestScore,
            averageScore,
            totalTime,
            averageTime,
            perfectGames,
            lastPlayed,
            playerName: playerName,
            recentGames: allGames, // –í—Å–µ –∏–≥—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            compositionGames: compositionGames,
            regularGames: regularGames
        };

        console.log('üìä [StorageService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞', playerName, ':', statistics);
        return statistics;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
     */
    clearGameHistory() {
        try {
            localStorage.removeItem(this.keys.gameHistory);
            console.log('üóëÔ∏è [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    clearPlayerStatistics(playerName = null) {
        try {
            if (!playerName) {
                playerName = this.loadPlayerName();
            }
            
            const history = this.loadGameHistory();
            const filteredHistory = history.filter(game => game.playerName !== playerName);
            
            localStorage.setItem(this.keys.gameHistory, JSON.stringify(filteredHistory));
            console.log('üóëÔ∏è [StorageService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞', playerName, '–æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
     */
    getAllPlayers() {
        try {
            const history = this.loadGameHistory();
            const players = [...new Set(history.map(game => game.playerName))].filter(name => name && name.trim());
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ localStorage, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            const currentPlayer = this.loadPlayerName();
            if (currentPlayer && currentPlayer.trim() && !players.includes(currentPlayer)) {
                players.push(currentPlayer);
                console.log('üë• [StorageService] –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫:', currentPlayer);
            }
            
            players.sort();
            console.log('üë• [StorageService] –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:', players.length);
            console.log('üë• [StorageService] –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', players);
            return players;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
            return [];
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    saveCompositionRange(range) {
        try {
            localStorage.setItem(this.keys.compositionRange, range);
            console.log('üíæ [StorageService] –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', range);
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    loadCompositionRange() {
        try {
            const range = localStorage.getItem(this.keys.compositionRange);
            console.log('üìñ [StorageService] –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', range);
            return range;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', error);
            return null;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    saveCompositionSettings(settings) {
        try {
            localStorage.setItem(this.keys.compositionSettings, JSON.stringify(settings));
            console.log('üíæ [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            setTimeout(() => {
                const saved = localStorage.getItem(this.keys.compositionSettings);
                if (saved) {
                    const parsed = JSON.parse(saved);
                    console.log('üíæ [StorageService] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É:', parsed);
                } else {
                    console.error('‚ùå [StorageService] –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å!');
                }
            }, 10);
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    loadCompositionSettings() {
        try {
            const settings = localStorage.getItem(this.keys.compositionSettings);
            console.log('üìñ [StorageService] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', settings);
            
            if (settings) {
                const parsedSettings = JSON.parse(settings);
                console.log('üìñ [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', parsedSettings);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if (parsedSettings.minNumber && parsedSettings.maxNumber && parsedSettings.repetitions) {
                    console.log('üìñ [StorageService] –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:', {
                        minNumber: parsedSettings.minNumber,
                        maxNumber: parsedSettings.maxNumber,
                        repetitions: parsedSettings.repetitions
                    });
                    return parsedSettings;
                } else {
                    console.log('üìñ [StorageService] –ù–µ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
                    return null;
                }
            } else {
                console.log('üìñ [StorageService] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
        return null;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    saveCompositionGame(gameData) {
        try {
            const existingGames = this.loadCompositionGames();
            existingGames.push(gameData);
            localStorage.setItem(this.keys.compositionGames, JSON.stringify(existingGames));
            console.log('üíæ [StorageService] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
     */
    loadCompositionGames() {
        try {
            const games = localStorage.getItem(this.keys.compositionGames);
            return games ? JSON.parse(games) : [];
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
            return [];
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    clearAllData() {
        try {
            Object.values(this.keys).forEach(key => {
                localStorage.removeItem(key);
            });
            console.log('üóëÔ∏è [StorageService] –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    exportData() {
        try {
            const currentPlayer = this.loadPlayerName();
            const playerHistory = this.loadGameHistory().filter(game => game.playerName === currentPlayer);
            
            const data = {
                playerName: currentPlayer,
                settings: this.loadGameSettings(),
                gameHistory: playerHistory,
                statistics: this.getPlayerStatistics(currentPlayer),
                exportDate: new Date().toISOString()
            };
            
            const dataStr = JSON.stringify(data, null, 2);
            console.log('üì§ [StorageService] –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞', currentPlayer, '—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            return dataStr;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    importData(jsonData) {
        try {
            const data = JSON.parse(jsonData);
            
            if (data.playerName) {
                this.savePlayerName(data.playerName);
            }
            
            if (data.settings) {
                this.saveGameSettings(data.settings);
            }
            
            if (data.gameHistory) {
                localStorage.setItem(this.keys.gameHistory, JSON.stringify(data.gameHistory));
            }
            
            console.log('üì• [StorageService] –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ ID
     */
    deleteGameById(gameId) {
        try {
            let deleted = false;
            
            // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä
            const history = this.loadGameHistory();
            const initialHistoryLength = history.length;
            const filteredHistory = history.filter(game => game.id !== gameId);
            
            if (filteredHistory.length < initialHistoryLength) {
                localStorage.setItem(this.keys.gameHistory, JSON.stringify(filteredHistory));
                console.log('üóëÔ∏è [StorageService] –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ —Å ID', gameId, '—É–¥–∞–ª–µ–Ω–∞');
                deleted = true;
            }
            
            // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–≥—Ä "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"
            const compositionHistory = this.loadCompositionGames();
            const initialCompositionLength = compositionHistory.length;
            const filteredCompositionHistory = compositionHistory.filter(game => game.id !== gameId);
            
            if (filteredCompositionHistory.length < initialCompositionLength) {
                localStorage.setItem(this.keys.compositionGames, JSON.stringify(filteredCompositionHistory));
                console.log('üóëÔ∏è [StorageService] –ò–≥—Ä–∞ "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞" —Å ID', gameId, '—É–¥–∞–ª–µ–Ω–∞');
                deleted = true;
            }
            
            if (!deleted) {
                console.log('‚ö†Ô∏è [StorageService] –ò–≥—Ä–∞ —Å ID', gameId, '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–∞—Ö, –Ω–∏ –≤ –∏–≥—Ä–∞—Ö "–°–æ—Å—Ç–∞–≤ —á–∏—Å–ª–∞"');
                return false;
            }
            
            console.log('‚úÖ [StorageService] –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
            return false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
     */
    saveCurrentScreen(screenId) {
        try {
            localStorage.setItem(this.keys.currentScreen, screenId);
            console.log('üíæ [StorageService] –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', screenId);
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
     */
    loadCurrentScreen() {
        try {
            const screenId = localStorage.getItem(this.keys.currentScreen);
            console.log('üìñ [StorageService] –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', screenId);
            return screenId;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error);
            return null;
        }
    }
}
