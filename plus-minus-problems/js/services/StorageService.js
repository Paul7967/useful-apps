/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
 */
class StorageService {
    constructor() {
        this.keys = {
            playerName: 'mathGamePlayerName',
            settings: 'mathGameSettings',
            gameHistory: 'mathGameHistory',
            statistics: 'mathGameStatistics'
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     */
    savePlayerName(name) {
        if (name && name.trim()) {
            localStorage.setItem(this.keys.playerName, name.trim());
            console.log('üíæ [StorageService] –ò–º—è –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', name.trim());
            return true;
        }
        return false;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     */
    loadPlayerName() {
        const name = localStorage.getItem(this.keys.playerName);
        console.log('üì• [StorageService] –ò–º—è –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', name || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return name || '';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    saveGameSettings(settings) {
        try {
            const settingsData = {
                maxNumber: settings.maxNumber || 10,
                examplesCount: settings.examplesCount || 5,
                operationType: settings.operationType || 'addition',
                timestamp: Date.now()
            };
            
            localStorage.setItem(this.keys.settings, JSON.stringify(settingsData));
            console.log('üíæ [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settingsData);
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     */
    loadGameSettings() {
        try {
            const saved = localStorage.getItem(this.keys.settings);
            if (saved) {
                const settings = JSON.parse(saved);
                console.log('üì• [StorageService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
                return settings;
            }
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultSettings = {
            maxNumber: 10,
            examplesCount: 5,
            operationType: 'addition'
        };
        console.log('üì• [StorageService] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultSettings);
        return defaultSettings;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    saveGameResult(gameResult) {
        try {
            const history = this.loadGameHistory();
            
            const result = {
                id: Date.now(),
                timestamp: new Date().toISOString(),
                playerName: gameResult.playerName || '–ò–≥—Ä–æ–∫',
                score: gameResult.score,
                totalExamples: gameResult.totalExamples,
                time: gameResult.time,
                operationType: gameResult.operationType,
                maxNumber: gameResult.maxNumber,
                percentage: gameResult.percentage,
                wrongExamples: gameResult.wrongExamples || []
            };
            
            history.push(result);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∏–≥—Ä–∞–º–∏
            if (history.length > 100) {
                history.splice(0, history.length - 100);
            }
            
            localStorage.setItem(this.keys.gameHistory, JSON.stringify(history));
            console.log('üíæ [StorageService] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
     */
    loadGameHistory() {
        try {
            const saved = localStorage.getItem(this.keys.gameHistory);
            if (saved) {
                const history = JSON.parse(saved);
                console.log('üì• [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', history.length, '–∏–≥—Ä');
                return history;
            }
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
        }
        
        console.log('üì• [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞');
        return [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerStatistics(playerName = null) {
        const history = this.loadGameHistory();
        
        // –ï—Å–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è
        if (!playerName) {
            playerName = this.loadPlayerName();
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
        const playerHistory = history.filter(game => game.playerName === playerName);
        
        if (playerHistory.length === 0) {
            return {
                totalGames: 0,
                bestScore: 0,
                averageScore: 0,
                totalTime: 0,
                averageTime: 0,
                perfectGames: 0,
                lastPlayed: null,
                playerName: playerName
            };
        }

        const totalGames = playerHistory.length;
        const scores = playerHistory.map(game => game.score);
        const times = playerHistory.map(game => game.time);
        
        const bestScore = Math.max(...scores);
        const averageScore = Math.round(scores.reduce((a, b) => a + b, 0) / totalGames);
        const totalTime = times.reduce((a, b) => a + b, 0);
        const averageTime = Math.round(totalTime / totalGames);
        const perfectGames = scores.filter(score => score === playerHistory[0].totalExamples).length;
        const lastPlayed = playerHistory[playerHistory.length - 1].timestamp;

        const statistics = {
            totalGames,
            bestScore,
            averageScore,
            totalTime,
            averageTime,
            perfectGames,
            lastPlayed,
            playerName: playerName,
            recentGames: playerHistory.slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        };

        console.log('üìä [StorageService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞', playerName, ':', statistics);
        return statistics;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
     */
    clearGameHistory() {
        try {
            localStorage.removeItem(this.keys.gameHistory);
            console.log('üóëÔ∏è [StorageService] –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    clearPlayerStatistics(playerName = null) {
        try {
            if (!playerName) {
                playerName = this.loadPlayerName();
            }
            
            const history = this.loadGameHistory();
            const filteredHistory = history.filter(game => game.playerName !== playerName);
            
            localStorage.setItem(this.keys.gameHistory, JSON.stringify(filteredHistory));
            console.log('üóëÔ∏è [StorageService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞', playerName, '–æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    clearAllData() {
        try {
            Object.values(this.keys).forEach(key => {
                localStorage.removeItem(key);
            });
            console.log('üóëÔ∏è [StorageService] –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    exportData() {
        try {
            const currentPlayer = this.loadPlayerName();
            const playerHistory = this.loadGameHistory().filter(game => game.playerName === currentPlayer);
            
            const data = {
                playerName: currentPlayer,
                settings: this.loadGameSettings(),
                gameHistory: playerHistory,
                statistics: this.getPlayerStatistics(currentPlayer),
                exportDate: new Date().toISOString()
            };
            
            const dataStr = JSON.stringify(data, null, 2);
            console.log('üì§ [StorageService] –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞', currentPlayer, '—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            return dataStr;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    importData(jsonData) {
        try {
            const data = JSON.parse(jsonData);
            
            if (data.playerName) {
                this.savePlayerName(data.playerName);
            }
            
            if (data.settings) {
                this.saveGameSettings(data.settings);
            }
            
            if (data.gameHistory) {
                localStorage.setItem(this.keys.gameHistory, JSON.stringify(data.gameHistory));
            }
            
            console.log('üì• [StorageService] –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå [StorageService] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }
}
